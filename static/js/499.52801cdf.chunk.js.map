{"version":3,"file":"static/js/499.52801cdf.chunk.js","mappings":"qQAUaA,EAAyB,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAE9BC,GAASC,EAAAA,EAAAA,QAA8B,MAEtCC,EAA4BH,EAA5BG,QAASC,EAAmBJ,EAAnBI,SAAUC,EAASL,EAATK,MAM1B,OAJAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACZ,UAAAL,EAAOM,eAAP,SAAgBC,eAAe,CAACC,SAAU,WAC3C,CAACT,KAGA,gBAAKU,IAAKT,EAAV,UACI,SAAC,IAAD,CACIU,QAAQ,uBAAIP,IACZQ,QAAQ,SAAC,IAAD,CAAQC,IAAKR,EAAOS,IAAI,aAChCC,SAAS,uBAAIZ,IACba,UACI,SAAC,IAAD,CAASC,MAAOC,GAAAA,GAASC,OAAO,uBAAhC,UACI,0BAAOD,GAAAA,GAASE,mBCpB3BC,EAAe,WAExB,OAAgCC,EAAAA,EAAAA,UAA4B,IAA5D,eAAOC,EAAP,KAAiBC,EAAjB,MAEAlB,EAAAA,EAAAA,YAAU,WACgB,IAAImB,UAPH,gEASTC,iBAAiB,WAAW,SAACC,GAEvC,IAAMC,EAAcC,KAAKC,MAAMH,EAAMI,MAErCP,GAAY,SAACQ,GAAD,wBAAmBA,IAAnB,OAAiCJ,YAElD,IAGH,IAAMzB,EAAUoB,EAASU,KAAI,SAAC9B,EAA0B+B,GACpD,OAAO,SAACnC,EAAD,CAA2CC,YAAaG,GAA1C+B,EAAQ,GAAK/B,EAAQgC,WAG9C,OACI,8BAAGhC,K,iDCvBJiC,EAAYC,EAAAA,EAAAA,SASbC,EAAS,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,SAAUC,EAAtB,EAAsBA,WAAYC,EAAlC,EAAkCA,MAAlC,OACX,iCACI,SAAC,SAAD,WACI,SAACN,EAAD,CAAUO,KAAM,EAAGJ,SAAUA,EAAUG,MAAOA,OAElD,SAAC,SAAD,WACI,SAAC,IAAD,CAAQE,SAAS,SAASC,QAASJ,EAAYK,QAASN,EAAUO,KAAK,UAAvE,+BAOCC,EAAqB,WAE9B,IAEMC,EAAgB,IAAIxB,UAFK,gEAIzBpB,GAAQ6C,EAAAA,EAAAA,IAAeC,EAAAA,IAE7B,GAAoC7B,EAAAA,EAAAA,WAAS,GAA7C,eAAOmB,EAAP,KAAmBW,EAAnB,KACA,GAA0B9B,EAAAA,EAAAA,UAAS+B,EAAAA,IAAnC,eAAOX,EAAP,KAAcY,EAAd,KAEA,IAAKjD,EAAO,OAAO,KAoBnB,OACI,+BACI,SAAC,IAAD,CACIO,QAAQ,SAAC,IAAD,CAAQC,IAAKR,EAAMkD,MAAOzC,IAAI,eACtCC,SACI,SAACuB,EAAD,CACIC,SAXC,SAACiB,GAClBF,EAASE,EAAEC,OAAOf,QAWFF,SAzBC,WACZE,IAELU,GAAc,GAEdM,YAAW,WACPT,EAAcU,KAAKjB,GAEnBU,GAAc,GACdE,EAASD,EAAAA,MACV,OAgBaZ,WAAYA,EACZC,MAAOA,SCnE/B,EAA4B,4BCMfkB,EAAW,WAEpB,OACI,iCACI,gBAAKC,UAAWC,EAAhB,UACI,SAACzC,EAAD,OAEJ,SAAC2B,EAAD","sources":["components/Chat/Messages/Message/Message.tsx","components/Chat/Messages/Messages.tsx","components/Chat/AddMessageForm.tsx","webpack://social-network-ts/./src/components/Chat/chatPage.module.css?406a","components/Chat/ChatPage.tsx"],"sourcesContent":["import {FC, useEffect, useRef} from 'react'\r\nimport {Avatar, Comment, Tooltip} from 'antd'\r\nimport moment from 'moment'\r\n\r\nimport {ChatMessageType} from '../../../../store/types'\r\n\r\ntype PropsType = {\r\n    chatMessage: ChatMessageType\r\n}\r\n\r\nexport const Message: FC<PropsType> = ({chatMessage}) => {\r\n\r\n    const bottom = useRef<null | HTMLDivElement>(null)\r\n\r\n    const {message, userName, photo} = chatMessage\r\n\r\n    useEffect(() => {\r\n        bottom.current?.scrollIntoView({behavior: 'auto'})\r\n    }, [chatMessage])\r\n\r\n    return (\r\n        <div ref={bottom}>\r\n            <Comment\r\n                author={<a>{userName}</a>}\r\n                avatar={<Avatar src={photo} alt=\"Han Solo\"/>}\r\n                content={<p>{message}</p>}\r\n                datetime={\r\n                    <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\r\n                        <span>{moment().fromNow()}</span>\r\n                    </Tooltip>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}","import {FC, useEffect, useState} from 'react'\n\nimport {ChatMessageType} from '../../../store/types'\n\nimport {Message} from './Message'\n\nconst WebSocketCommonChatURL = 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\n\nexport const Messages: FC = () => {\n\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\n\n    useEffect(() => {\n        const webSocketChat = new WebSocket(WebSocketCommonChatURL)\n\n        webSocketChat.addEventListener('message', (event) => {\n\n            const newMessages = JSON.parse(event.data)\n\n            setMessages((prevState) => [...prevState, ...newMessages])\n        })\n    }, [])\n\n\n    const message = messages.map((message: ChatMessageType, index) => {\n        return <Message key={index + '' + message.userId} chatMessage={message}/>\n    })\n\n    return (\n        <>{message}</>\n    )\n}","import {ChangeEvent, FC, useState} from 'react'\r\nimport {Avatar, Button, Comment, Form, Input} from 'antd'\r\n\r\nimport {getCurrentUserPhotos, useAppSelector} from '../../store'\r\nimport {EMPTY_STRING} from '../../constans'\r\n\r\nconst {TextArea} = Input\r\n\r\ntype EditorProps = {\r\n    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void;\r\n    onSubmit: () => void;\r\n    submitting: boolean;\r\n    value: string;\r\n}\r\n\r\nconst Editor = ({onChange, onSubmit, submitting, value}: EditorProps) => (\r\n    <>\r\n        <Form.Item>\r\n            <TextArea rows={4} onChange={onChange} value={value}/>\r\n        </Form.Item>\r\n        <Form.Item>\r\n            <Button htmlType=\"submit\" loading={submitting} onClick={onSubmit} type=\"default\">\r\n                Add Comment\r\n            </Button>\r\n        </Form.Item>\r\n    </>\r\n)\r\n\r\nexport const AddMessageForm: FC = () => {\r\n\r\n    const WebSocketCommonChatURL = 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\r\n\r\n    const webSocketChat = new WebSocket(WebSocketCommonChatURL)\r\n\r\n    const photo = useAppSelector(getCurrentUserPhotos)\r\n\r\n    const [submitting, setSubmitting] = useState(false)\r\n    const [value, setValue] = useState(EMPTY_STRING)\r\n\r\n    if (!photo) return null\r\n\r\n    const handleSubmit = () => {\r\n        if (!value) return\r\n\r\n        setSubmitting(true)\r\n\r\n        setTimeout(() => {\r\n            webSocketChat.send(value)\r\n\r\n            setSubmitting(false)\r\n            setValue(EMPTY_STRING)\r\n        }, 1000)\r\n    }\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Comment\r\n                avatar={<Avatar src={photo.small} alt=\"photo user\"/>}\r\n                content={\r\n                    <Editor\r\n                        onChange={handleChange}\r\n                        onSubmit={handleSubmit}\r\n                        submitting={submitting}\r\n                        value={value}\r\n                    />\r\n                }\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"chatPage_container__S4TOn\"};","import React from 'react'\r\n\r\nimport {Messages} from './Messages'\r\nimport {AddMessageForm} from './AddMessageForm'\r\nimport styles from './chatPage.module.css'\r\n\r\n\r\nexport const ChatPage = () => {\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.container}>\r\n                <Messages/>\r\n            </div>\r\n            <AddMessageForm/>\r\n        </>\r\n    )\r\n}\r\n\r\n"],"names":["Message","chatMessage","bottom","useRef","message","userName","photo","useEffect","current","scrollIntoView","behavior","ref","author","avatar","src","alt","content","datetime","title","moment","format","fromNow","Messages","useState","messages","setMessages","WebSocket","addEventListener","event","newMessages","JSON","parse","data","prevState","map","index","userId","TextArea","Input","Editor","onChange","onSubmit","submitting","value","rows","htmlType","loading","onClick","type","AddMessageForm","webSocketChat","useAppSelector","getCurrentUserPhotos","setSubmitting","EMPTY_STRING","setValue","small","e","target","setTimeout","send","ChatPage","className","styles"],"sourceRoot":""}