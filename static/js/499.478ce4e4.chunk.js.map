{"version":3,"file":"static/js/499.478ce4e4.chunk.js","mappings":"iSAUaA,GAAyBC,EAAAA,EAAAA,OAAK,YAAoB,IAAlBC,EAAiB,EAAjBA,YAElCC,EAA4BD,EAA5BC,QAASC,EAAmBF,EAAnBE,SAAUC,EAASH,EAATG,MAEpBC,GAASC,EAAAA,EAAAA,QAA8B,MAE7C,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAkBA,OANAC,EAAAA,EAAAA,YAAU,WACa,IAAD,EAAdF,IACA,UAAAH,EAAOM,eAAP,SAAgBC,eAAe,CAACC,SAAU,YAE/C,CAACZ,KAGA,gBAAKa,MAAO,CAACC,SAAU,QAASC,IAAKX,EAAQY,SAhBd,SAACC,GAChC,IAAMC,EAAUD,EAAME,cAClBC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EjB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWpC,UACI,SAAC,IAAD,CACIiB,QAAQ,uBAAIvB,IACZwB,QAAQ,SAAC,IAAD,CAAQC,IAAKxB,EAAOyB,IAAI,aAChCC,SAAS,uBAAI5B,IACb6B,UACI,SAAC,IAAD,CAASC,MAAOC,GAAAA,GAASC,OAAO,uBAAhC,UACI,0BAAOD,GAAAA,GAASE,qBClC3BC,EAAe,WAExB,IAEMlC,GAFWmC,EAAAA,EAAAA,IAAeC,EAAAA,IAEPC,KAAI,SAACrC,EAA0BsC,GACpD,OAAO,SAACzC,EAAD,CAAqDE,YAAaC,GAApDsC,EAAQC,EAAAA,GAAevC,EAAQwC,WAGxD,OACI,8BAAGxC,K,uCCRJyC,EAAYC,EAAAA,EAAAA,SASbC,EAAS,SAAC,GAA0D,IAAzDC,EAAwD,EAAxDA,SAAUC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,MAEvCC,GAASb,EAAAA,EAAAA,IAAec,EAAAA,IAE9B,OACI,iCACI,SAAC,SAAD,WACI,SAACR,EAAD,CAAUS,KAAM,EAAGN,SAAUA,EAAUG,MAAOA,OAElD,SAAC,SAAD,WACI,SAAC,IAAD,CAAQI,SAAUH,IAAWI,EAAAA,GAAAA,MACrBC,SAAS,SACTC,QAASR,EACTS,QAASV,EACTW,KAAK,UAJb,+BAYHC,EAAqB,WAE9B,IAAMC,GAAWC,EAAAA,EAAAA,MAEXzD,GAAQiC,EAAAA,EAAAA,IAAeyB,EAAAA,IAE7B,GAAoCvD,EAAAA,EAAAA,WAAS,GAA7C,eAAOyC,EAAP,KAAmBe,EAAnB,KACA,GAA0BxD,EAAAA,EAAAA,UAASkC,EAAAA,IAAnC,eAAOQ,EAAP,KAAce,EAAd,KAoBA,OAAK5D,GAKD,+BACI,SAAC,IAAD,CACIuB,QAAQ,SAAC,IAAD,CAAQC,IAAKxB,EAAM6D,MAAOpC,IAAI,eACtCC,SACI,SAACe,EAAD,CAEIC,SAfC,SAACoB,GAClBF,EAASE,EAAEC,OAAOlB,QAeFF,SA7BC,WACZE,GAELmB,YAAW,WAEPR,GAASS,EAAAA,EAAAA,IAAgB,CAACnE,QAAS+C,KAEnCc,GAAc,GACdC,EAASvB,EAAAA,MAEV,MAoBaO,WAAYA,EACZC,MAAOA,QAbhB,MCnEf,EAA4B,4BCSfqB,EAAW,WAEpB,IAAMV,GAAWC,EAAAA,EAAAA,MAUjB,OARAnD,EAAAA,EAAAA,YAAU,WAEN,OADAkD,GAASW,EAAAA,EAAAA,OACF,WACHX,GAASY,EAAAA,EAAAA,UAGd,CAACZ,KAGA,iCACI,gBAAKa,UAAWC,EAAhB,UACI,SAACtC,EAAD,OAEJ,SAACuB,EAAD","sources":["components/Chat/Messages/Message/Message.tsx","components/Chat/Messages/Messages.tsx","components/Chat/AddMessageForm.tsx","webpack://social-network-ts/./src/components/Chat/chatPage.module.css?406a","components/Chat/ChatPage.tsx"],"sourcesContent":["import React, {FC, memo, useEffect, useRef, useState} from 'react'\r\nimport {Avatar, Comment, Tooltip} from 'antd'\r\nimport moment from 'moment'\r\n\r\nimport {ChatMessageType} from '../../../../types'\r\n\r\ntype PropsType = {\r\n    chatMessage: ChatMessageType\r\n}\r\n\r\nexport const Message: FC<PropsType> = memo(({chatMessage}) => {\r\n\r\n    const {message, userName, photo} = chatMessage\r\n\r\n    const bottom = useRef<null | HTMLDivElement>(null)\r\n\r\n    const [isScrollAuto, setIsScrollAuto] = useState(true)\r\n\r\n\r\n    const onMessageContentAutoScroll = (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = event.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isScrollAuto && setIsScrollAuto(true)\r\n        } else {\r\n            isScrollAuto && setIsScrollAuto(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isScrollAuto) {\r\n            bottom.current?.scrollIntoView({behavior: 'auto'})\r\n        }\r\n    }, [chatMessage])\r\n\r\n    return (\r\n        <div style={{overflow: 'auto'}} ref={bottom} onScroll={onMessageContentAutoScroll}>\r\n            <Comment\r\n                author={<a>{userName}</a>}\r\n                avatar={<Avatar src={photo} alt=\"Han Solo\"/>}\r\n                content={<p>{message}</p>}\r\n                datetime={\r\n                    <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\r\n                        <span>{moment().fromNow()}</span>\r\n                    </Tooltip>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n})","import {FC} from 'react'\r\n\r\nimport {ChatMessageType} from '../../../types'\r\nimport {EMPTY_STRING} from '../../../constans'\r\nimport {getChatMessages, useAppSelector} from '../../../store'\r\n\r\nimport {Message} from './Message'\r\n\r\nexport const Messages: FC = () => {\r\n\r\n    const messages = useAppSelector(getChatMessages)\r\n\r\n    const message = messages.map((message: ChatMessageType, index) => {\r\n        return <Message key={index + EMPTY_STRING + message.userId} chatMessage={message}/>\r\n    })\r\n\r\n    return (\r\n        <>{message}</>\r\n    )\r\n}","import {ChangeEvent, FC, useState} from 'react'\r\nimport {Avatar, Button, Comment, Form, Input} from 'antd'\r\nimport {useDispatch} from 'react-redux'\r\n\r\nimport {getChatStatus, getCurrentUserPhotos, useAppSelector} from '../../store'\r\nimport {EMPTY_STRING} from '../../constans'\r\nimport {StatusChat} from '../../enum'\r\nimport {sendChatMessage} from '../../store/reducers'\r\n\r\nconst {TextArea} = Input\r\n\r\ntype EditorProps = {\r\n    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void;\r\n    onSubmit: () => void;\r\n    submitting: boolean;\r\n    value: string;\r\n}\r\n\r\nconst Editor = ({onChange, onSubmit, submitting, value}: EditorProps) => {\r\n\r\n    const status = useAppSelector(getChatStatus)\r\n\r\n    return (\r\n        <>\r\n            <Form.Item>\r\n                <TextArea rows={4} onChange={onChange} value={value}/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button disabled={status !== StatusChat.Ready}\r\n                        htmlType=\"submit\"\r\n                        loading={submitting}\r\n                        onClick={onSubmit}\r\n                        type=\"default\"\r\n                >\r\n                    Add Comment\r\n                </Button>\r\n            </Form.Item>\r\n        </>)\r\n}\r\n\r\nexport const AddMessageForm: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const photo = useAppSelector(getCurrentUserPhotos)\r\n\r\n    const [submitting, setSubmitting] = useState(false)\r\n    const [value, setValue] = useState(EMPTY_STRING)\r\n\r\n\r\n    const handleSubmit = () => {\r\n        if (!value) return\r\n\r\n        setTimeout(() => {\r\n\r\n            dispatch(sendChatMessage({message: value}))\r\n\r\n            setSubmitting(false)\r\n            setValue(EMPTY_STRING)\r\n\r\n        }, 1000)\r\n    }\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    if (!photo) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Comment\r\n                avatar={<Avatar src={photo.small} alt=\"photo user\"/>}\r\n                content={\r\n                    <Editor\r\n\r\n                        onChange={handleChange}\r\n                        onSubmit={handleSubmit}\r\n                        submitting={submitting}\r\n                        value={value}\r\n                    />\r\n                }\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"chatPage_container__S4TOn\"};","import {useEffect} from 'react'\r\nimport {useDispatch} from 'react-redux'\r\n\r\nimport {startMessagesListening, stopMessagesListening} from 'store/reducers'\r\n\r\nimport {Messages} from './Messages'\r\nimport {AddMessageForm} from './AddMessageForm'\r\nimport styles from './chatPage.module.css'\r\n\r\n\r\nexport const ChatPage = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.container}>\r\n                <Messages/>\r\n            </div>\r\n            <AddMessageForm/>\r\n        </>\r\n    )\r\n}\r\n\r\n"],"names":["Message","memo","chatMessage","message","userName","photo","bottom","useRef","useState","isScrollAuto","setIsScrollAuto","useEffect","current","scrollIntoView","behavior","style","overflow","ref","onScroll","event","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","author","avatar","src","alt","content","datetime","title","moment","format","fromNow","Messages","useAppSelector","getChatMessages","map","index","EMPTY_STRING","userId","TextArea","Input","Editor","onChange","onSubmit","submitting","value","status","getChatStatus","rows","disabled","StatusChat","htmlType","loading","onClick","type","AddMessageForm","dispatch","useDispatch","getCurrentUserPhotos","setSubmitting","setValue","small","e","target","setTimeout","sendChatMessage","ChatPage","startMessagesListening","stopMessagesListening","className","styles"],"sourceRoot":""}