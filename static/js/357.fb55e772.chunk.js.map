{"version":3,"file":"static/js/357.fb55e772.chunk.js","mappings":"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","sources":["webpack://social-network-ts/./src/ui/Profile/Posts/Post/post.module.css?cf20","ui/Profile/Posts/Post/Post.tsx","ui/Profile/Posts/posts.module.css","ui/Profile/Posts/Posts.tsx","webpack://social-network-ts/./src/ui/Profile/ProfileInfo/profileInfo.module.css?2baa","ui/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","ui/Profile/ProfileInfo/ProfileInfo.tsx","ui/Profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"post_item__Y44XK\",\"post\":\"post_post__bXjYk\"};","import React from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport {deletePost} from '../../../../redux/reducers/profileReducer';\r\n\r\nimport styles from './post.module.css';\r\nimport postPhoto from './../../../../assets/img/postPhoto.jpg';\r\n\r\ntype PropsType = {\r\n    postId: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: React.FC<PropsType> = React.memo(({ postId, message, likesCount}) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const deletePostHandle = () => {\r\n      dispatch(deletePost({postId}))\r\n    }\r\n\r\n    return (\r\n        <div className={styles.post}>\r\n            <div className={`${styles.item}`}>\r\n                <img\r\n                    src={postPhoto}\r\n                    alt=\"postPhoto\"/>\r\n                {message}\r\n                <button onClick={deletePostHandle}>X</button>\r\n            </div>\r\n            <span> like {likesCount}</span>\r\n        </div>\r\n    );\r\n})","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"posts_posts__3+dq1\"};","import React from 'react';\r\nimport * as Yup from 'yup';\r\nimport {Form, Formik, FormikHelpers, FormikValues} from 'formik';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport {addPost} from '../../../redux/reducers/profileReducer';\r\nimport {useAppSelector} from '../../../redux/store';\r\nimport {FormikField} from '../../../reusableComponent/FormikField';\r\n\r\nimport {Post} from './Post/Post';\r\nimport styles from './posts.module.css';\r\n\r\nexport const Posts: React.FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const posts = useAppSelector(state => state.profile.posts);\r\n    const error = useAppSelector(state => state.app.error)\r\n\r\n    const post = posts.map(p => {\r\n        return <Post key={p.id} postId={p.id} message={p.message} likesCount={p.likesCount}/>;\r\n    });\r\n    const addPostHandle = (message: FormikValues, action: FormikHelpers<{ postMessage: string }>) => {\r\n        dispatch(addPost({postText: message.postMessage.toString()}))\r\n        action.resetForm({values: {postMessage: ''}})\r\n    }\r\n    const validationSchema = {\r\n        postMessage: Yup.string()\r\n            .max(30, `Max length is ${30} symbols`),\r\n    }\r\n\r\n    return (\r\n        <div className={styles.posts}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <Formik\r\n                    initialValues={{postMessage: ''}}\r\n                    validationSchema={Yup.object(validationSchema)}\r\n                    onSubmit={addPostHandle}\r\n                >\r\n                    {formik => (\r\n                        <Form>\r\n                            <FormikField name={'postMessage'}\r\n                                         type={'text'}\r\n                                         isShowError={true}\r\n                                         isShowLabel={false}\r\n                                         error={error}\r\n                            />\r\n                            <button disabled={!!formik.errors.postMessage} type=\"submit\">add post</button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n            {post}\r\n        </div>\r\n    );\r\n})\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileDescription\":\"profileInfo_profileDescription__BO3tU\",\"profileImage\":\"profileInfo_profileImage__1TspQ\",\"avatar\":\"profileInfo_avatar__QE0AW\",\"select\":\"profileInfo_select__hrqd3\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport {useAppSelector} from '../../../../redux/store';\r\nimport {updateProfileUserStatusTC} from '../../../../redux/reducers/profileReducer';\r\n\r\n\r\nexport const ProfileStatus: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useAppSelector(state => state.profile.status)\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [value, setValue] = useState<string>(status)\r\n\r\n    const changeOnEditModeHandle = () => {\r\n        setEditMode(true)\r\n        setValue(value)\r\n    }\r\n    const changeOnViewModeHandle = () => {\r\n        setEditMode(false)\r\n        updateStatus(value)\r\n    }\r\n    const onChangeValueHandle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n    const updateStatus = (status: string) => {\r\n        dispatch(updateProfileUserStatusTC({status}))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setValue(status)\r\n        return () => {\r\n            setValue('')\r\n        }\r\n    }, [status])\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ? <input value={value}\r\n                         onBlur={changeOnViewModeHandle}\r\n                         onChange={onChangeValueHandle}\r\n                         autoFocus\r\n                />\r\n                : <span onDoubleClick={changeOnEditModeHandle}>{status || '----'}</span>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport {ProfileUserType} from '../../../api/profileAPI';\r\nimport {Preloader} from '../../Preloader/Preloader';\r\nimport select from '../../../assets/img/select.png';\r\nimport ava from '../../../assets/img/client-2-512.webp';\r\nimport {savePhotoTC} from '../../../redux/reducers/profileReducer';\r\n\r\nimport styles from './profileInfo.module.css';\r\nimport {ProfileStatus} from './ProfileStatus/ProfileStatus';\r\n\r\ntype PropsType = {\r\n    user: ProfileUserType | null\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = React.memo(({user, isOwner}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const savePhotoHandle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            dispatch(savePhotoTC(e.target.files[0]))\r\n        }\r\n    }\r\n\r\n    if (!user) {\r\n        return <Preloader/>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.profileDescription}>\r\n                <div>\r\n                    <img className={styles.avatar}\r\n                         src={user.photos.large || ava}\r\n                         alt=\"avatar\"\r\n                    />\r\n                    {isOwner ? <div><input type=\"file\" onChange={savePhotoHandle}/></div> : ''}\r\n                </div>\r\n                <h2>{user ? user.fullName : ''}</h2>\r\n                <div>{user ? user.aboutMe : ''}</div>\r\n                <ProfileStatus/>\r\n                <div>\r\n                    {user.lookingForAJob\r\n                        ? <div>\r\n                            <b>lookingForAJob? </b>\r\n                            <img className={styles.select} src={select} alt=\"select\"/>\r\n                        </div>\r\n                        : ''}\r\n                </div>\r\n                <div>\r\n                    {user.lookingForAJobDescription}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n})","import React, {useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\n\r\nimport {useAppSelector} from '../../redux/store';\r\nimport {getProfileUserStatusTC, setProfileUserTC} from '../../redux/reducers/profileReducer';\r\nimport {PATH} from '../Routing/Routing';\r\n\r\nimport {Posts} from './Posts/Posts';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\n\r\n\r\nexport const Profile: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const params = useParams<'profileUserId'>();\r\n    const navigate = useNavigate()\r\n\r\n    const user = useAppSelector(state => state.profile.profile);\r\n    const {id, isAuth} = useAppSelector(state => state.auth);\r\n\r\n    let profileUserId: number;\r\n\r\n    if (params.profileUserId) {\r\n        profileUserId = +params.profileUserId;\r\n    } else {\r\n        profileUserId = id;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isAuth) {\r\n            navigate(PATH.LOGIN_PAGE)\r\n        }\r\n        dispatch(getProfileUserStatusTC(profileUserId))\r\n        dispatch(setProfileUserTC(profileUserId));\r\n    }, [dispatch, isAuth, navigate, profileUserId]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo user={user} isOwner={profileUserId===id}/>\r\n            <Posts/>\r\n        </div>\r\n    );\r\n};\r\n\r\n"],"names":["Post","React","postId","message","likesCount","dispatch","useDispatch","className","styles","src","alt","onClick","deletePost","Posts","posts","useAppSelector","state","profile","error","app","post","map","p","id","validationSchema","postMessage","Yup","max","initialValues","onSubmit","action","addPost","postText","toString","resetForm","values","formik","FormikField","name","type","isShowError","isShowLabel","disabled","errors","ProfileStatus","status","useState","editMode","setEditMode","value","setValue","updateStatus","updateProfileUserStatusTC","useEffect","onBlur","onChange","e","currentTarget","autoFocus","onDoubleClick","ProfileInfo","user","isOwner","photos","large","ava","target","files","length","savePhotoTC","fullName","aboutMe","lookingForAJob","select","lookingForAJobDescription","Preloader","Profile","profileUserId","params","useParams","navigate","useNavigate","auth","isAuth","PATH","getProfileUserStatusTC","setProfileUserTC"],"sourceRoot":""}