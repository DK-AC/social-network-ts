{"version":3,"file":"static/js/846.0c1b51bb.chunk.js","mappings":"qQACA,EAAuB,mBAAvB,EAAiD,mB,SCapCA,EAA4BC,EAAAA,MAAW,YAAqC,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAE9DC,GAAWC,EAAAA,EAAAA,MAMjB,OACI,iBAAKC,UAAWC,EAAhB,WACI,iBAAKD,UAAS,UAAKC,GAAnB,WACI,gBACIC,I,8hJACAC,IAAI,cACPP,GACD,mBAAQQ,QAXK,WACvBN,GAASO,EAAAA,EAAAA,IAAW,CAACV,OAAAA,MAUX,mBAEJ,qCAAaE,WC9BzB,EAAwB,qBCWXS,EAAkBZ,EAAAA,MAAW,WAEtC,IAAMI,GAAWC,EAAAA,EAAAA,MAEXQ,GAAQC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQH,SAC9CI,GAAQH,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMG,IAAID,SAE1CE,EAAON,EAAMO,KAAI,SAAAC,GACnB,OAAO,SAACtB,EAAD,CAAiBE,OAAQoB,EAAEC,GAAIpB,QAASmB,EAAEnB,QAASC,WAAYkB,EAAElB,YAAtDkB,EAAEC,OAMlBC,EAAmB,CACrBC,YAAaC,EAAAA,KACRC,IAAI,GADI,wBACiB,GADjB,cAIjB,OACI,iBAAKpB,UAAWC,EAAhB,WACI,sCACA,0BACI,SAAC,KAAD,CACIoB,cAAe,CAACH,YAAa,IAC7BD,iBAAkBE,EAAAA,GAAWF,GAC7BK,SAhBM,SAAC1B,EAAuB2B,GAC1CzB,GAAS0B,EAAAA,EAAAA,IAAQ,CAACC,SAAU7B,EAAQsB,YAAYQ,cAChDH,EAAOI,UAAU,CAACC,OAAQ,CAACV,YAAa,OAWhC,SAKK,SAAAW,GAAM,OACH,UAAC,KAAD,YACI,SAACC,EAAA,EAAD,CAAaC,KAAM,cACNC,KAAM,OACNC,aAAa,EACbC,aAAa,EACbvB,MAAOA,KAEpB,mBAAQwB,WAAYN,EAAOO,OAAOlB,YAAac,KAAK,SAApD,8BAKfnB,Q,mBCpDb,EAAqC,wCAArC,EAAuI,4BAAvI,EAAkN,6B,UCarMwB,EAA6B,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAEzCzC,GAAWC,EAAAA,EAAAA,MAQjB,OACI,4BACI,gBAAKC,UAAWC,EAAeC,IAAKoC,EAAME,OAASC,EAAKtC,IAAI,WAC3DoC,GAAU,0BAAK,kBAAOP,KAAK,OAAOU,SATnB,SAACC,GACjBA,EAAEC,OAAOC,OAASF,EAAEC,OAAOC,MAAMC,QACjChD,GAASiD,EAAAA,EAAAA,IAAYJ,EAAEC,OAAOC,MAAM,UAOoC,OCrBvEG,EAAgC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC3C,OAAO,4BAAK,uCAAL,IAAyBA,MCAvBC,EAAsC,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,eAAgBC,EAA+B,EAA/BA,0BACjE,OACI,4BACI,4BAAK,+CAA2BD,EAAiB,MAAQ,QACxDA,GACK,4BAAK,2DAAL,IAA6CC,KAC7C,OCPLC,EAA+B,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC1C,OAAO,4BAAK,sCAAkBA,MCErBC,EAA+B,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACxD,OAAO,iBAAKzD,UAAWC,EAAhB,WAAgC,yBAAIwD,EAAJ,QAAwBD,MCAtDE,EAAgC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC3C,OACI,4BACI,sCACAC,OACKC,KAAKF,GACL7C,KACA,SAAAgD,GACG,OAAO,SAACP,EAAD,CACSE,aAAcK,EACdN,aAAcG,EAASG,IAFlBA,UCH5BC,EAAmC,SAAC,GAAsC,IAArCrD,EAAoC,EAApCA,QAAS6B,EAA2B,EAA3BA,QAASyB,EAAkB,EAAlBA,aACzDf,EAA0EvC,EAA1EuC,SAAUG,EAAgE1C,EAAhE0C,0BAA2BD,EAAqCzC,EAArCyC,eAAgBQ,EAAqBjD,EAArBiD,SAAUL,EAAW5C,EAAX4C,QAEtE,OACI,gCACKf,IAAW,0BACR,mBAAQnC,QAAS4D,EAAjB,qBAEJ,SAAChB,EAAD,CAAUC,SAAUA,KACpB,SAACC,EAAD,CAAgBC,eAAgBA,EAChBC,0BAA2BA,KAE3C,SAACC,EAAD,CAASC,QAASA,KAClB,SAACI,EAAD,CAAUC,SAAUA,QCZnBM,EAAuC,SAAC,GAA6B,IAA5BvD,EAA2B,EAA3BA,QAASwD,EAAkB,EAAlBA,aAErDpE,GAAWC,EAAAA,EAAAA,MAEXY,GAAQH,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMG,IAAID,SAEzCsC,EAA0EvC,EAA1EuC,SAAUG,EAAgE1C,EAAhE0C,0BAA2BD,EAAqCzC,EAArCyC,eAAgBQ,EAAqBjD,EAArBiD,SAEtDtC,EAAgB,CAClB4B,SAAAA,EACAE,eAAAA,EACAC,0BAAAA,EACAE,QAN6E5C,EAAX4C,QAOlEK,SAAAA,EACAQ,OAAQzD,EAAQyD,OAChBC,OAAQ1D,EAAQ0D,QAQpB,OACI,+BACI,SAAC,KAAD,CACI/C,cAAeA,EACfC,SATc,SAACM,GACvB9B,GAASuE,EAAAA,EAAAA,IAAczC,IACvBsC,KAKI,SAIK,SAAArC,GAAM,OACH,UAAC,KAAD,YACI,mBAAQG,KAAK,SAAb,mBACA,4BACI,wCACA,SAACF,EAAA,EAAD,CAAaC,KAAM,WACNpB,MAAOA,EACP2D,YAAa,kBAG9B,4BACI,gDACA,SAACxC,EAAA,EAAD,CAAaE,KAAM,WACND,KAAM,iBACNpB,MAAOA,QAGxB,4BACI,qDACA,SAACmB,EAAA,EAAD,CAAaC,KAAM,4BACNpB,MAAOA,EACP2D,YAAa,+BAG9B,4BACI,uCACA,SAACxC,EAAA,EAAD,CAAaC,KAAM,UACNpB,MAAOA,EACP2D,YAAa,iBAG9B,4BACI,sCACAV,OACKC,KAAKF,GACL7C,KAAI,SAAAgD,GACD,OACI,gBAAe9D,UAAWC,EAA1B,UACI,yBAAI6D,EAAJ,KACI,SAAChC,EAAA,EAAD,CAAaC,KAAI,mBAAc+B,GAClBnD,MAAOA,EACP2D,YAAaR,QAJxBA,kBC3ErCS,EAAmB,WAE5B,IAAMzE,GAAWC,EAAAA,EAAAA,MAEXyE,GAAShE,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQ8D,UAErD,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAiBD,GAA3C,eAAOI,EAAP,KAAcC,EAAd,KAaMC,EAAe,SAACN,GAClB1E,GAASiF,EAAAA,EAAAA,IAA0B,CAACP,OAAAA,MAWxC,OAPAQ,EAAAA,EAAAA,YAAU,WAEN,OADAH,EAASL,GACF,WACHK,EAAS,OAEd,CAACL,KAGA,8BACKE,GACK,kBAAOE,MAAOA,EACPK,OAvBU,WAC3BN,GAAY,GACZG,EAAaF,IAsBIlC,SApBO,SAACC,GACzBkC,EAASlC,EAAEuC,cAAcN,QAoBRO,WAAS,KAEhB,kBAAMC,cA/BW,WAC3BT,GAAY,GACZE,EAASD,IA6BC,WAA6C,oCAAgBJ,GAAU,aC/B5Ea,EAAmC3F,EAAAA,MAAW,YAAyB,IAAvBgB,EAAsB,EAAtBA,QAAS6B,EAAa,EAAbA,QAElE,GAAgCkC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAKA,OAAKjE,GAKD,+BACI,iBAAKV,UAAWC,EAAhB,WACI,SAACoC,EAAD,CAAOC,MAAO5B,EAAQ0D,OAAQ7B,QAASA,IACtCmC,GACK,SAACT,EAAD,CAAiBvD,QAASA,EAASwD,aAXhC,kBAAMS,GAAY,OAYrB,SAACZ,EAAD,CAAarD,QAASA,EAAS6B,QAASA,EAASyB,aAb9C,kBAAMW,GAAY,OAe3B,SAACJ,EAAD,UAXD,SAACe,EAAA,EAAD,OCZFC,EAAoB,WAE7B,IAWIC,EAXJ,GAA8ChF,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMgF,QAItE3F,GAJN,EAAQ4F,WAAR,EAAoBC,MAApB,EAA2BC,MAA3B,EAAkCC,UAIjB9F,EAAAA,EAAAA,OACX+F,GAASC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MAEXvF,GAAUF,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQA,WACtD,GAAqBF,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMgF,QAA5CzE,EAAP,EAAOA,GAAIkF,EAAX,EAAWA,OAmBX,OAdIV,EADAM,EAAON,eACUM,EAAON,cAERxE,GAGpBgE,EAAAA,EAAAA,YAAU,WACDkB,GACDF,EAASG,EAAAA,EAAAA,YAEbrG,GAASsG,EAAAA,EAAAA,GAAuBZ,IAChC1F,GAASuG,EAAAA,EAAAA,IAAiBb,MAC3B,CAAC1F,EAAUoG,EAAQF,EAAUR,KAI5B,4BACI,SAACH,EAAD,CAAa3E,QAASA,EAAS6B,QAASiD,IAAgBxE,KACxD,SAACV,EAAD,S","sources":["webpack://social-network-ts/./src/ui/Profile/Posts/Post/post.module.css?cf20","ui/Profile/Posts/Post/Post.tsx","ui/Profile/Posts/posts.module.css","ui/Profile/Posts/Posts.tsx","webpack://social-network-ts/./src/ui/Profile/ProfileInfo/profileInfo.module.css?2baa","ui/Profile/ProfileInfo/Photo.tsx","ui/Profile/ProfileInfo/FullName.tsx","ui/Profile/ProfileInfo/LookingForAJob.tsx","ui/Profile/ProfileInfo/AboutMe.tsx","ui/Profile/ProfileInfo/Contact.tsx","ui/Profile/ProfileInfo/Contacts.tsx","ui/Profile/ProfileInfo/ProfileData.tsx","ui/Profile/ProfileInfo/ProfileDataForm..tsx","ui/Profile/ProfileInfo/Status.tsx","ui/Profile/ProfileInfo/ProfileInfo.tsx","ui/Profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"post_item__Y44XK\",\"post\":\"post_post__bXjYk\"};","import React from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport {deletePost} from '../../../../redux/reducers/profileReducer';\r\n\r\nimport styles from './post.module.css';\r\nimport postPhoto from './../../../../assets/img/postPhoto.jpg';\r\n\r\ntype PropsType = {\r\n    postId: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: React.FC<PropsType> = React.memo(({ postId, message, likesCount}) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const deletePostHandle = () => {\r\n      dispatch(deletePost({postId}))\r\n    }\r\n\r\n    return (\r\n        <div className={styles.post}>\r\n            <div className={`${styles.item}`}>\r\n                <img\r\n                    src={postPhoto}\r\n                    alt=\"postPhoto\"/>\r\n                {message}\r\n                <button onClick={deletePostHandle}>X</button>\r\n            </div>\r\n            <span> like {likesCount}</span>\r\n        </div>\r\n    );\r\n})","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"posts_posts__3+dq1\"};","import React from 'react';\r\nimport * as Yup from 'yup';\r\nimport {Form, Formik, FormikHelpers, FormikValues} from 'formik';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport {addPost} from '../../../redux/reducers/profileReducer';\r\nimport {useAppSelector} from '../../../redux/store';\r\nimport {FormikField} from '../../../reusableComponent/FormikField';\r\n\r\nimport {Post} from './Post/Post';\r\nimport styles from './posts.module.css';\r\n\r\nexport const Posts: React.FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const posts = useAppSelector(state => state.profile.posts);\r\n    const error = useAppSelector(state => state.app.error)\r\n\r\n    const post = posts.map(p => {\r\n        return <Post key={p.id} postId={p.id} message={p.message} likesCount={p.likesCount}/>;\r\n    });\r\n    const addPostHandle = (message: FormikValues, action: FormikHelpers<{ postMessage: string }>) => {\r\n        dispatch(addPost({postText: message.postMessage.toString()}))\r\n        action.resetForm({values: {postMessage: ''}})\r\n    }\r\n    const validationSchema = {\r\n        postMessage: Yup.string()\r\n            .max(30, `Max length is ${30} symbols`),\r\n    }\r\n\r\n    return (\r\n        <div className={styles.posts}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <Formik\r\n                    initialValues={{postMessage: ''}}\r\n                    validationSchema={Yup.object(validationSchema)}\r\n                    onSubmit={addPostHandle}\r\n                >\r\n                    {formik => (\r\n                        <Form>\r\n                            <FormikField name={'postMessage'}\r\n                                         type={'text'}\r\n                                         isShowError={true}\r\n                                         isShowLabel={false}\r\n                                         error={error}\r\n                            />\r\n                            <button disabled={!!formik.errors.postMessage} type=\"submit\">add post</button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n            {post}\r\n        </div>\r\n    );\r\n})\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileDescription\":\"profileInfo_profileDescription__BO3tU\",\"profileImage\":\"profileInfo_profileImage__1TspQ\",\"avatar\":\"profileInfo_avatar__QE0AW\",\"select\":\"profileInfo_select__hrqd3\",\"contact\":\"profileInfo_contact__cJ9-8\"};","import React, {ChangeEvent} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport ava from '../../../assets/img/client-2-512.webp';\r\nimport {PhotosType} from '../../../api/profileAPI';\r\nimport {savePhotoTC} from '../../../redux/reducers/profileReducer';\r\n\r\nimport styles from './profileInfo.module.css';\r\n\r\ntype PropsType = {\r\n    photo: PhotosType\r\n    isOwner: boolean\r\n}\r\n\r\nexport const Photo: React.FC<PropsType> = ({photo, isOwner}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const savePhotoHandle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            dispatch(savePhotoTC(e.target.files[0]))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img className={styles.avatar} src={photo.large || ava} alt=\"avatar\"/>\r\n            {isOwner ? <div><input type=\"file\" onChange={savePhotoHandle}/></div> : ''}\r\n        </div>)\r\n}","import React from 'react';\r\n\r\ntype PropsType = {\r\n    fullName: string\r\n}\r\n\r\nexport const FullName: React.FC<PropsType> = ({fullName}) => {\r\n    return <div><b>Full name: </b> {fullName}</div>\r\n}","import React from 'react';\r\n\r\ntype PropsType = {\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n}\r\n\r\nexport const LookingForAJob: React.FC<PropsType> = ({lookingForAJob, lookingForAJobDescription}) => {\r\n    return (\r\n        <div>\r\n            <div><b>Looking for a job: </b>{lookingForAJob ? 'Yes' : 'No'}</div>\r\n            {lookingForAJob\r\n                ? <div><b>Looking for a job description: </b> {lookingForAJobDescription}</div>\r\n                : ''}\r\n        </div>)\r\n}","import React from 'react';\r\n\r\ntype PropsType = {\r\n    aboutMe: string\r\n}\r\n\r\nexport const AboutMe: React.FC<PropsType> = ({aboutMe}) => {\r\n    return <div><b>About me: </b>{aboutMe}</div>\r\n}","import React from 'react';\r\n\r\nimport styles from './profileInfo.module.css';\r\n\r\ntype PropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact: React.FC<PropsType> = ({contactValue, contactTitle}) => {\r\n    return <div className={styles.contact}><b>{contactTitle}: </b>{contactValue}</div>\r\n}","import React from 'react';\r\n\r\nimport {ContactsUserType} from '../../../api/profileAPI';\r\n\r\nimport {Contact} from './Contact';\r\n\r\ntype PropsType = {\r\n    contacts: ContactsUserType\r\n}\r\n\r\nexport const Contacts: React.FC<PropsType> = ({contacts}) => {\r\n    return (\r\n        <div>\r\n            <b>Contacts: </b>{\r\n            Object\r\n                .keys(contacts)\r\n                .map\r\n                (key => {\r\n                    return <Contact key={key}\r\n                                    contactTitle={key}\r\n                                    contactValue={contacts[key as keyof ContactsUserType]}\r\n                    />\r\n                })}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\nimport {ProfileUserType} from '../../../api/profileAPI';\r\n\r\nimport {FullName} from './FullName';\r\nimport {LookingForAJob} from './LookingForAJob';\r\nimport {AboutMe} from './AboutMe';\r\nimport {Contacts} from './Contacts';\r\n\r\ntype PropsType = {\r\n    profile: ProfileUserType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData: React.FC<PropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    const {fullName, lookingForAJobDescription, lookingForAJob, contacts, aboutMe} = profile\r\n\r\n    return (\r\n        <>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <FullName fullName={fullName}/>\r\n            <LookingForAJob lookingForAJob={lookingForAJob}\r\n                            lookingForAJobDescription={lookingForAJobDescription}\r\n            />\r\n            <AboutMe aboutMe={aboutMe}/>\r\n            <Contacts contacts={contacts}/>\r\n        </>)\r\n}","import React from 'react';\r\nimport {Form, Formik} from 'formik';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport {ProfileUserType} from '../../../api/profileAPI';\r\nimport {ContactsKeysType, FormikField} from '../../../reusableComponent/FormikField';\r\nimport {useAppSelector} from '../../../redux/store';\r\nimport {saveProfileTC} from '../../../redux/reducers/profileReducer';\r\n\r\nimport styles from './profileInfo.module.css'\r\n\r\ntype PropsType = {\r\n    profile: ProfileUserType\r\n    goToSaveMode: () => void\r\n}\r\n\r\nexport const ProfileDataForm: React.FC<PropsType> = ({profile, goToSaveMode}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const error = useAppSelector(state => state.app.error)\r\n\r\n    const {fullName, lookingForAJobDescription, lookingForAJob, contacts, aboutMe} = profile\r\n\r\n    const initialValues = {\r\n        fullName,\r\n        lookingForAJob,\r\n        lookingForAJobDescription,\r\n        aboutMe,\r\n        contacts,\r\n        userId: profile.userId,\r\n        photos: profile.photos,\r\n    }\r\n\r\n    const onSubmitLoginUser = (values: ProfileUserType) => {\r\n        dispatch(saveProfileTC(values))\r\n        goToSaveMode()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmitLoginUser}\r\n            >\r\n                {formik => (\r\n                    <Form>\r\n                        <button type=\"submit\">Save</button>\r\n                        <div>\r\n                            <b>Full name: </b>\r\n                            <FormikField name={'fullName'}\r\n                                         error={error}\r\n                                         placeholder={'Full name'}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>Looking for a job: </b>\r\n                            <FormikField type={'checkbox'}\r\n                                         name={'lookingForAJob'}\r\n                                         error={error}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>My professional skills: </b>\r\n                            <FormikField name={'lookingForAJobDescription'}\r\n                                         error={error}\r\n                                         placeholder={'My professional skills'}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>About me: </b>\r\n                            <FormikField name={'aboutMe'}\r\n                                         error={error}\r\n                                         placeholder={'About me'}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>Contacts: </b>{\r\n                            Object\r\n                                .keys(contacts)\r\n                                .map(key => {\r\n                                    return (\r\n                                        <div key={key} className={styles.contact}>\r\n                                            <b>{key}:\r\n                                                <FormikField name={`contacts.${key as ContactsKeysType}`}\r\n                                                             error={error}\r\n                                                             placeholder={key}\r\n                                                />\r\n                                            </b>\r\n                                        </div>)\r\n                                })}\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport {useAppSelector} from '../../../redux/store';\r\nimport {updateProfileUserStatusTC} from '../../../redux/reducers/profileReducer';\r\n\r\n\r\nexport const Status: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useAppSelector(state => state.profile.status)\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [value, setValue] = useState<string>(status)\r\n\r\n    const changeOnEditModeHandle = () => {\r\n        setEditMode(true)\r\n        setValue(value)\r\n    }\r\n    const changeOnViewModeHandle = () => {\r\n        setEditMode(false)\r\n        updateStatus(value)\r\n    }\r\n    const onChangeValueHandle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n    const updateStatus = (status: string) => {\r\n        dispatch(updateProfileUserStatusTC({status}))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setValue(status)\r\n        return () => {\r\n            setValue('')\r\n        }\r\n    }, [status])\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ? <input value={value}\r\n                         onBlur={changeOnViewModeHandle}\r\n                         onChange={onChangeValueHandle}\r\n                         autoFocus\r\n                />\r\n                : <span onDoubleClick={changeOnEditModeHandle}><b>Status: </b>{status || '----'}</span>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n","import React, {useState} from 'react';\r\n\r\nimport {ProfileUserType} from '../../../api/profileAPI';\r\nimport {Preloader} from '../../Preloader/Preloader';\r\n\r\nimport styles from './profileInfo.module.css';\r\nimport {Photo} from './Photo';\r\nimport {ProfileData} from './ProfileData';\r\nimport {ProfileDataForm} from './ProfileDataForm.';\r\nimport {Status} from './Status';\r\n\r\ntype PropsType = {\r\n    profile: ProfileUserType | null\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileInfo: React.FC<PropsType> = React.memo(({profile, isOwner}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const goToEditMode = () => setEditMode(true)\r\n    const goToSaveMode = () => setEditMode(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.profileDescription}>\r\n                <Photo photo={profile.photos} isOwner={isOwner}/>\r\n                {editMode\r\n                    ? <ProfileDataForm profile={profile} goToSaveMode={goToSaveMode}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={goToEditMode}/>\r\n                }\r\n                <Status/>\r\n            </div>\r\n        </>\r\n    );\r\n})\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\n\r\nimport {useAppSelector} from '../../redux/store';\r\nimport {getProfileUserStatusTC, setProfileUserTC} from '../../redux/reducers/profileReducer';\r\nimport {PATH} from '../Routing/Routing';\r\n\r\nimport {Posts} from './Posts/Posts';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\n\r\n\r\nexport const Profile: React.FC = () => {\r\n\r\n    const { captchaURL, email, login, password} = useAppSelector(state => state.auth)\r\n\r\n    // console.log(email, password, login)\r\n\r\n    const dispatch = useDispatch();\r\n    const params = useParams<'profileUserId'>();\r\n    const navigate = useNavigate()\r\n\r\n    const profile = useAppSelector(state => state.profile.profile);\r\n    const {id, isAuth} = useAppSelector(state => state.auth);\r\n\r\n    let profileUserId: number;\r\n\r\n    if (params.profileUserId) {\r\n        profileUserId = +params.profileUserId;\r\n    } else {\r\n        profileUserId = id;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isAuth) {\r\n            navigate(PATH.LOGIN_PAGE)\r\n        }\r\n        dispatch(getProfileUserStatusTC(profileUserId))\r\n        dispatch(setProfileUserTC(profileUserId));\r\n    }, [dispatch, isAuth, navigate, profileUserId]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} isOwner={profileUserId===id}/>\r\n            <Posts/>\r\n        </div>\r\n    );\r\n};\r\n\r\n"],"names":["Post","React","postId","message","likesCount","dispatch","useDispatch","className","styles","src","alt","onClick","deletePost","Posts","posts","useAppSelector","state","profile","error","app","post","map","p","id","validationSchema","postMessage","Yup","max","initialValues","onSubmit","action","addPost","postText","toString","resetForm","values","formik","FormikField","name","type","isShowError","isShowLabel","disabled","errors","Photo","photo","isOwner","large","ava","onChange","e","target","files","length","savePhotoTC","FullName","fullName","LookingForAJob","lookingForAJob","lookingForAJobDescription","AboutMe","aboutMe","Contact","contactValue","contactTitle","Contacts","contacts","Object","keys","key","ProfileData","goToEditMode","ProfileDataForm","goToSaveMode","userId","photos","saveProfileTC","placeholder","Status","status","useState","editMode","setEditMode","value","setValue","updateStatus","updateProfileUserStatusTC","useEffect","onBlur","currentTarget","autoFocus","onDoubleClick","ProfileInfo","Preloader","Profile","profileUserId","auth","captchaURL","email","login","password","params","useParams","navigate","useNavigate","isAuth","PATH","getProfileUserStatusTC","setProfileUserTC"],"sourceRoot":""}